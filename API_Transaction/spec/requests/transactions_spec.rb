require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/transactions", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Transaction. As you add validations to Transaction, be sure to
  # adjust the attributes here as well.
  let(:user){create(:user)}
  let(:user_2){create(:second_user)}

  let(:valid_attributes) {
    {
      "coin_to_send" => "usd",
      "coin_to_receive" => "btc",
      "amount_to_send" => "9.99",
      # "amount_to_receive" => "9.99",
      "sender_id" => user.id,
      "receiver_id" => user_2.id
    }
  }

  let(:invalid_attributes) {
    {
      coin_to_send: "usd",
      coin_to_receive: "btc",
      amount_to_send: "9.99",
      amount_to_receive: "9.99",
      sender: user
      # receiver: create(:second_user)
    }
  }

  before do
    Transaction.create! valid_attributes
    Transaction.create! valid_attributes
    Transaction.create! valid_attributes
    Transaction.create! valid_attributes
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # TransactionsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "renders a successful response" do
      get transactions_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end

    it "shows all the transactions" do
      get "/transactions"
      expect(response).to have_http_status(200)
      res = JSON.parse(response.body)
      expect(res.length).to eq(4)
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      transaction = Transaction.create! valid_attributes
      get transaction_url(transaction), as: :json
      expect(response).to be_successful
    end
    
    it "shows a transaction" do
      transaction = Transaction.create! valid_attributes
      get "/transactions/#{transaction.id}"
      expect(response).to have_http_status(200)
      res = JSON.parse(response.body)
      expect(res).to include(valid_attributes)
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Transaction" do
        expect {
          post transactions_url,
               params: { transaction: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Transaction, :count).by(1)
      end

      it "renders a JSON response with the new transaction" do
        post transactions_url,
             params: { transaction: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end

      it "explicit response, new transaction" do
        post "/transactions", :params => { :transaction => valid_attributes}
        expect(response).to have_http_status(201)
        res = JSON.parse(response.body)
        expect(res).to include(valid_attributes)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Transaction" do
        expect {
          post transactions_url,
               params: { transaction: invalid_attributes }, as: :json
        }.to change(Transaction, :count).by(0)
      end

      it "renders a JSON response with errors for the new transaction" do
        post transactions_url,
             params: { transaction: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          coin_to_send: "btc"
        }
      }

      it "renders a JSON response with the transaction" do
        transaction = Transaction.create! valid_attributes
        patch transaction_url(transaction),
              params: { transaction: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    # context "with invalid parameters" do
    #   it "renders a JSON response with errors for the transaction" do
    #     transaction = Transaction.create! valid_attributes
    #     patch transaction_url(transaction),
    #           params: { transaction: invalid_attributes }, headers: valid_headers, as: :json
    #     expect(response).to have_http_status(:unprocessable_entity)
    #     expect(response.content_type).to match(a_string_including("application/json"))
    #   end
    # end
  end

  describe "DELETE /destroy" do
    it "destroys the requested transaction" do
      transaction = Transaction.create! valid_attributes
      expect {
        delete transaction_url(transaction), headers: valid_headers, as: :json
      }.to change(Transaction, :count).by(-1)
    end
  end

  describe "CoinGecko" do
    it "connect to third API" do
      get "/transactions/convert"
      expect(response).to have_http_status(200)
      expect(response.content_type).to match(a_string_including("application/json"))
      res = JSON.parse(response.body)
      expect(res).to include("bitcoin")
      expect(res['bitcoin']).to include("usd")
      # Respuesta de CoinGecko, valor que se utilizar√° para convertir btc a usd y al contrario
      puts res['bitcoin']['usd']
    end
  end
end
